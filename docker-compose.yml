
services:
  # MongoDB con health check
  # MongoDB
  mongo:
    image: mongo:5
    container_name: eventflow-mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: eventflow
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - eventflow-network

  # PostgreSQL
  postgres:
    image: postgres:13
    container_name: eventflow-postgres
    environment:
      POSTGRES_DB: eventflow
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - eventflow-network

  # Redis
  redis:
    image: redis:6-alpine
    container_name: eventflow-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - eventflow-network

  # User Service (Node.js) - SOLO este por ahora
  user-service:
    build: 
      context: ./user-service
      dockerfile: Dockerfile
    container_name: eventflow-user-service
    ports:
      - "3001:3001"
    environment:
      - MONGO_URI=mongodb://mongo:27017/eventflow
      - REDIS_URI=redis://redis:6379
      - PORT=3001
    depends_on:
      - mongo
      - redis
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', res => {process.exit(res.statusCode===200?0:1)})"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - eventflow-network

  event-service:
    build:
      context: ./event-service
      dockerfile: Dockerfile
    container_name: eventflow-event-service
    ports:
      - "3002:3002"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mongo:27017/eventflow
      - SERVER_PORT=3002
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3002/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - eventflow-network
    restart: unless-stopped


  reservation-service:
    build:
      context: ./reservation-service
      dockerfile: Dockerfile
    container_name: eventflow-reservation-service
    ports:
      - "3003:3003"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/eventflow
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - USER_SERVICE_URL=http://user-service:3001
      - EVENT_SERVICE_URL=http://event-service:3002
      - PAYMENT_SERVICE_URL=http://payment-service:4000
      - SERVER_PORT=3003
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
      event-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3003/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - eventflow-network
    restart: unless-stopped

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: eventflow-payment-service
    ports:
      - "4000:4000"
    environment:
      - SERVER_PORT=4000
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4000/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - eventflow-network

volumes:
  mongo_data:
  postgres_data:

networks:
  eventflow-network:
    driver: bridge