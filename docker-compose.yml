version: '3.8'

services:
  # MongoDB
  mongo:
    image: mongo:5
    container_name: eventflow-mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - eventflow-network

  # PostgreSQL
  postgres:
    image: postgres:13
    container_name: eventflow-postgres
    environment:
      POSTGRES_DB: eventflow
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - eventflow-network

  # Redis
  redis:
    image: redis:6-alpine
    container_name: eventflow-redis
    ports:
      - "6379:6379"
    networks:
      - eventflow-network

  # User Service (Node.js)
  user-service:
    build: ./user-service
    container_name: eventflow-user-service
    ports:
      - "3001:3001"
    environment:
      - MONGO_URI=mongodb://mongo:27017/eventflow
      - PORT=3001
    depends_on:
      - mongo
    networks:
      - eventflow-network

  # Event Service (Java Spring Boot)
  event-service:
    build: ./event-service
    container_name: eventflow-event-service
    ports:
      - "3002:3002"
    environment:
      - MONGO_URI=mongodb://mongo:27017/eventflow
      - SERVER_PORT=3002
    depends_on:
      - mongo
    networks:
      - eventflow-network

  # Reservation Service (Java Spring Boot)
  reservation-service:
    build: ./reservation-service
    container_name: eventflow-reservation-service
    ports:
      - "3003:3003"
    environment:
      - POSTGRES_URI=jdbc:postgresql://postgres:5432/eventflow
      - REDIS_URI=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3001
      - EVENT_SERVICE_URL=http://event-service:3002
      - SERVER_PORT=3003
    depends_on:
      - postgres
      - redis
      - user-service
      - event-service
    networks:
      - eventflow-network

volumes:
  mongo_data:
  postgres_data:

networks:
  eventflow-network:
    driver: bridge