
services:
  # MongoDB con health check
  # MongoDB
  mongo:
    image: mongo:5
    container_name: eventflow-mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: eventflow
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mongo_data:/data/db
    networks:
      - eventflow-network
      

  # PostgreSQL
  postgres:
    image: postgres:13
    container_name: eventflow-postgres
    environment:
      POSTGRES_DB: eventflow
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - eventflow-network

  # Redis
  redis:
    image: redis:6-alpine
    container_name: eventflow-redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"
    networks:
      - eventflow-network

  # User Service (Node.js) - SOLO este por ahora
  user-service:
    build: 
      context: ./user-service
      dockerfile: Dockerfile
    container_name: eventflow-user-service
    ports:
      - "3001:3001"
    environment:
      - MONGO_URI=mongodb://mongo:27017/eventflow
      - REDIS_URI=redis://redis:6379
      - PORT=3001
    depends_on:
      - mongo
      - redis
    networks:
      - eventflow-network

  # Event Service (comentado)
  # event-service:
  #   build:
  #     context: ./event-service
  #     dockerfile: Dockerfile
  #   container_name: eventflow-event-service
  #   ports:
  #     - "3002:3002"
  #   environment:
  #     - SPRING_DATA_MONGODB_URI=mongodb://mongo:27017/eventflow
  #     - SERVER_PORT=3002
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     mongo:
  #       condition: service_healthy
  #   networks:
  #     - eventflow-network
  #   restart: unless-stopped

  # Reservation Service con todas las dependencias (comentado):
  reservation-service:
    build:
      context: ./reservation-service
      dockerfile: Dockerfile
    container_name: eventflow-reservation-service
    ports:
      - "3003:3003"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/eventflow
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_REDIS_HOST=redis
      - USER_SERVICE_URL=http://user-service:3001
      - EVENT_SERVICE_URL=http://event-service:3002
      - SERVER_PORT=3003
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
      #event-service:
      #  condition: service_started
    networks:
      - eventflow-network
    restart: unless-stopped

volumes:
  mongo_data:
  postgres_data:

networks:
  eventflow-network:
    driver: bridge
